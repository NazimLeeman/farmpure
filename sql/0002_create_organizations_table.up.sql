CREATE TABLE IF NOT EXISTS public.organizations (
    id INT GENERATED BY DEFAULT AS IDENTITY (START WITH 10001) PRIMARY KEY,
    name VARCHAR(100) DEFAULT 'Default Org',
    tagline VARCHAR(255),
    description TEXT,
    type VARCHAR(20) DEFAULT 'startup' CHECK (type IN ('sme', 'farm', 'startup', 'nonprofit', 'government', 'education', 'other')),
    tags TEXT[] DEFAULT ARRAY[]::TEXT[],
    website VARCHAR(255),
    phone VARCHAR(20),
    emails email[] CHECK (email_primary = ANY(emails)),
    email_primary email,
    country VARCHAR(2) DEFAULT 'BD',
    city VARCHAR(100),
    timezone VARCHAR(100) DEFAULT 'Asia/Dhaka',
    language VARCHAR(2) DEFAULT 'en',
    location JSONB, -- geojson
    urls JSONB, -- [{name:url}]
    logo UUID,
    banner UUID,
    creator_id TEXT REFERENCES public.users(id),
    slug VARCHAR(100) GENERATED ALWAYS AS (slugify(name)) STORED,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);
--
CREATE OR REPLACE FUNCTION auth.create_organization_on_signup()
RETURNS TRIGGER AS $$
BEGIN
    -- Insert a new row into organizations table using a default name if first_name is null
    INSERT INTO public.organizations(name)
    VALUES ('Default Org');
    RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE TRIGGER tr_create_organization_on_signup
AFTER INSERT ON auth.users2
FOR EACH ROW
EXECUTE FUNCTION auth.create_organization_on_signup();

GRANT SELECT ON public.organizations TO anon;
GRANT SELECT,INSERT,UPDATE,DELETE ON public.organizations TO authn;
--
